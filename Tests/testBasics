#!/usr/bin/python

"""
   Example Zapy Usage - Test the Basics of the Zapy Library

   Builds an App Profile for a Hybrid Environment

   Copyright (C) 2012-2018 Zentera Systems, Inc. - All Rights Reserved
"""

import sys
import Zapy
import getpass
import time

#
# Keys and Url
#
zcKeys = Zapy.keyChain(
   '/home/lesds/.ZapyKeys/a62b836b0b4e4ea6afbca04f18360bad.json', 
   'usae.zentera.net/zCenter'
)

#
# Instantiate a Default App Profile
#
print 'Create a New App Profile'
ap = Zapy.AppProfile(zcKeys, 'Configs/LesProfileOneCfg.json')
ap.syncWithController()
ap.saveCfg('LesProfileOneDef.json')

#
# Cloud Domains
#
print 'Create New Cloud Domain 1'
cd1 = Zapy.CloudDomain(zcKeys, 'Configs/cfgCloudDomain1.json')
cd1.syncWithController()

print 'Create New Cloud Domain 2'
cd2 = Zapy.CloudDomain(zcKeys, 'Configs/cfgCloudDomain2.json')
cd2.syncWithController()

print 'Create New Cloud Domain 3'
cd3 = Zapy.CloudDomain(zcKeys, 'Configs/cfgCloudDomain3.json')
cd3.syncWithController()

#
# Cloud Server Pools
#
print 'Create Cloud Server Pool 1'
sp1 = Zapy.CloudServerPool(zcKeys, 'Configs/cfgCloudServerPool1.json')
sp1.syncWithController(cd1)

print 'Create Cloud Server Pool 2'
sp2 = Zapy.CloudServerPool(zcKeys, 'Configs/cfgCloudServerPool2.json')
sp2.syncWithController(cd2)

print 'Create Cloud Server Pool 3'
sp3 = Zapy.CloudServerPool(zcKeys, 'Configs/cfgCloudServerPool3.json')
sp3.syncWithController(cd3)

#
# Fabric Server Pools
#
print 'Create Fabric Server Pool 1'
fp1 = Zapy.FabricServerPool(zcKeys, 'Configs/cfgFabricServerPool1.json')
fp1.syncWithController(cd1)

print 'Create Fabric Server Pool 2'
fp2 = Zapy.FabricServerPool(zcKeys, 'Configs/cfgFabricServerPool2.json')
fp2.syncWithController(cd2)

#
# Register the EndServers for the Edge Gateways
#
sshPassword = "Acme*123!" # getpass.getpass('   Enter Password > ')

print 'Registering EndServer 1'
es1 = Zapy.EndServer(zcKeys, 'Configs/cfgEndServer1.json')
es1.set('endServerId', None)
es1.set('sshPassword', sshPassword)
es1.EndServer_register(sp1)

print 'Registering EndServer 2'
es2 = Zapy.EndServer(zcKeys, 'Configs/cfgEndServer2.json')
es2.set('endServerId', None)
es2.set('sshPassword', sshPassword)
es2.EndServer_register(sp1)

print 'Registering Edge Gateway 1'
eg1 = Zapy.EndServer(zcKeys, 'Configs/cfgEdgeGateway1Sa.json')
eg1.set('endServerId', None)
eg1.set('sshPassword', sshPassword)
eg1.EndServer_register(fp1)

print 'Registering Edge Gateway 2'
eg2 = Zapy.EndServer(zcKeys, 'Configs/cfgEdgeGateway1Sb.json')
eg2.set('endServerId', None)
eg2.set('sshPassword', sshPassword)
eg2.EndServer_register(fp2)

print 'Registering Edge Gateway 3'
eg3 = Zapy.EndServer(zcKeys, 'Configs/cfgEdgeGateway3.json')
eg3.set('endServerId', None)
eg3.set('sshPassword', sshPassword)
eg3.EndServer_register(fp2)

#
# Server Groups
#
print 'Create New Server Group 1'
sg1 = Zapy.ServerGroup(zcKeys, 'Configs/cfgServerGroup1.json')
sg1.syncWithController(ap, cd1, sg1)

print 'Create New Server Group 2'
sg2 = Zapy.ServerGroup(zcKeys, 'Configs/cfgServerGroup2.json')
sg2.syncWithController(ap, cd1, sg2)

print 'Create New Server Group 3'
sg3 = Zapy.ServerGroup(zcKeys, 'Configs/cfgServerGroup3.json')
sg3.syncWithController(ap, cd2, sg3)

#
# Assign Servers
#
print 'Add EndServer to Server Group 1'
sg1.ServerGroup_manualAddEndServers([es1.get('endServerId')])

print 'Add EndServer to Server Group 2'
sg2.ServerGroup_manualAddEndServers([es2.get('endServerId')])

#
# CoIP Lan
#
print 'Create CoipLan'
cl = Zapy.CoipLan(zcKeys, 'Configs/cfgCoipLan.json')
cl.syncWithController(ap, sg1, sg2)

#
# CoIP Wans
#
print 'Create CoipWan Type One'
cw1 = Zapy.CoipWanTypeOne(zcKeys, 'Configs/cfgCoipWanTypeOne.json')
cw1.syncWithController(ap, sg1, sg3)

print 'Create CoipWan Type Two'
cw2 = Zapy.CoipWanTypeTwo(zcKeys, 'Configs/cfgCoipWanTypeTwo.json')
cw2.syncWithController(ap, sg2, eg3)

print 'Create CoipWan Type Three Sa'
cw3 = Zapy.CoipWanTypeThree(zcKeys, 'Configs/cfgCoipWanTypeThreeSa.json')
cw3.syncWithController(ap, eg1, eg2)

print 'Create CoipWan Type Three Sb'
cw4 = Zapy.CoipWanTypeThree(zcKeys, 'Configs/cfgCoipWanTypeThreeSb.json')
cw4.syncWithController(ap, eg1, eg2)

print
ans = raw_input("Type 'a' to to delete all, <Return> to keep EndServers > ")

print
print 'Deleting App Profile'
ap.AppProfile_delete()

if 'a' in ans:
   print 'Unregistering EndServers'
   es1.EndServer_unregister()
   es2.EndServer_unregister()
   eg1.EndServer_unregister()
   eg2.EndServer_unregister()
   eg3.EndServer_unregister()
else:
   print 'Keeping EndServers Registered'

print 'Deleting Cloud Server Pools'
sp1.CloudServerPool_delete()
sp2.CloudServerPool_delete()
sp3.CloudServerPool_delete()

print 'Deleting Fabric Server Pools'
fp1.FabricServerPool_delete()
fp2.FabricServerPool_delete()

print 'Deleting Cloud Domains'
cd1.CloudDomain_delete()
cd2.CloudDomain_delete()
cd3.CloudDomain_delete()

print
print 'Delete Complete'
print

#!/usr/bin/python

"""
   Tests the 'Cradle to Grave' creation of a Users, UserGroups, and Access Server Assignment

   Here Ye! This is be a Prototype!

   zapyClass.loadCfg() should abstract away different config file formats

"""

import sys
import Zapy
import csv

#
# Load Keys
#

zaKeys = Zapy.keyChain(
   '/home/lesds/.ZapyKeys/ee4160675d6d4079b255a6aabaeadf3f.json', 
   'usae.zentera.net/zAccess'
)

zcKeys = Zapy.keyChain(
   '/home/lesds/.ZapyKeys/a62b836b0b4e4ea6afbca04f18360bad.json', 
   'usae.zentera.net/zCenter'
)

#
# Create a New User Group
#
newUserGroup = Zapy.ZaUserGroup(zaKeys, 'Configs/cfgZaUserGroup.json')
print
print 'Create a New User Group', newUserGroup.get('groupName')
newUserGroup.syncWithController()

####################################################################################################
#
# Read a CSV File and Create New Users
#
# Prototype: Design goal to abstract config file formats (e.g. JSON, CSV...)
#
#    Ideally, we should abstract the format of a config file away from the user. If I refer to a
#    CSV file, Zapy should just read it. Likewise with a JSON file.
#
####################################################################################################

csvFileName = 'Configs/cfgUserAdd.csv'
newUser     = Zapy.ZaUser(zaKeys, None)

print
print 'Creating New Users'

with open(csvFileName, 'rb') as csvFile:
   myReader = csv.reader(csvFile)

   i = 0

   headers = []

   for row in myReader:
      if i == 0:
         #
	 # Read the CSV Header Line so we can reference them by name during the decode
	 #
	 #    Assumes that the first line is the header line!
	 #
         headers = row

	 # print headers
      
      else:
	 #
	 # Reset this default user from the basic configuration file
	 #
         newUser.loadCfg('Configs/cfgZaUser.json')
         
	 print '   Adding New User', row[headers.index('account')]

	 #
	 # Set the Required attributes for a new User
	 #
	 #    Could use **kwargs...
	 #
	 newUser.set('account',   		row[headers.index('account')])
	 newUser.set('firstName', 		row[headers.index('firstName')])
	 newUser.set('lastName',  		row[headers.index('lastName')])
	 newUser.set('email',     		row[headers.index('email')])
	 newUser.set('userType',  		row[headers.index('userType')])
	 newUser.set('password',            	'changeMe')
	 newUser.set('forceChPwdNextLogin', 	True)

	 # newUser.inspect()

	 #
	 # Create the New User
	 #
	 newUser.syncWithController()

	 newUserGroup.ZaUserGroup_addUser(newUser)
	 newUserGroup.syncWithController()

      i = i + 1

####################################################################################################

#
# List the Users in this User Group
#
print
print 'List Users in', newUserGroup.get('groupName')
info = newUserGroup.ZaUserGroup_listUsers()

for i in range(len(info['data'])):
   print '  ', info['data'][i]['account']

#
# Add an Access Server to the User Group
#
print
print 'Adding Access Servers'
for hostname in ['UC1ZZNCLAND0101', 'UC1ZZNCLSF0201']:
   print '  ', hostname
   newUserGroup.ZaUserGroup_addAcl(hostname)

#
# Change the Description in the New User Group
#
# Note: The Description Edit command will not be available until rev 4.3.1
#
ap = Zapy.AppProfile(zcKeys, 'Configs/LesProfileOneCfg.json')
version = ap.getControllerSoftwareVersions()
if "4.3.1" in version['zcenterVersion']:
   print
   print "Edit UserGroup Description"
   print "   Before: Description of", newUserGroup.get('groupName'), "==", newUserGroup.get('description')
   newUserGroup.set('description', 'Set by API');
   newUserGroup.ZaUserGroup_editDesc()
   print "   After:  Description of", newUserGroup.get('groupName'), "==", newUserGroup.get('description')

#
# Cleanup Phase
#
print
raw_input('Ready to Delete Users? ')

for i in range(len(info['data'])):
   print '   Deleting', info['data'][i]['account']
   newUser.ZaUser_delete(info['data'][i]['account'])

print
raw_input('Ready to Delete User Group? ')

newUserGroup.ZaUserGroup_delete()

print "   User Group Deleted"
print


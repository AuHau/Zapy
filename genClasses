#!/usr/bin/perl

#
# Zapy Class Generator
#
# Copyright (C) 2012-2018 Zentera Systems, Inc. - All Rights Reserved
#
# This demonstration software is provided by the copyright holders and contributors "as is" and 
# any express or implied warranties, including, but not limited to, the implied warranties of 
# merchantability and fitness for a particular purpose are disclaimed. In no event shall the 
# copyright holder or contributors be liable for any direct, indirect, incidental, special, 
# exemplary, or consequential damages (Including, but not limited to, procurement of substitute 
# goods or services; Loss of use, data, or profits; or business interruption) however caused and 
# on any theory of liability, whether in contract, strict liability, or tort (including negligence 
# or otherwise) arising in any way out of the use of this software, even if advised of the 
# possibility of such damage.
#
# This software is for demonstration purposes only and is not supported by Zentera Systems, Inc.

#
# List of Object Classes to Generate
#
# Each one listed here needs a matching Attribs, Methods, and optionally a Protos file
#
push(@classObjs, 'AppProfile');
push(@classObjs, 'CloudDomain');
push(@classObjs, 'CloudServerPool');
push(@classObjs, 'CoipLan');
push(@classObjs, 'CoipWanTypeOne');
push(@classObjs, 'CoipWanTypeTwo');
push(@classObjs, 'CoipWanTypeThree');
push(@classObjs, 'EndServer');
push(@classObjs, 'FabricServerPool');
push(@classObjs, 'InlineDeviceGroup');
push(@classObjs, 'ServerGroup');
push(@classObjs, 'ZaUser');
push(@classObjs, 'ZaUserGroup');

print "\n";

#
# Keep some Statistics
#
$classCnt = 0;
$methsCnt = 0;
$protoCnt = 0;
$todosCnt = 0;

#
# Outer Loop of Class Objects
#
foreach $classObj (@classObjs){
   print "Generating $classObj Class Information\n";
   
   $Hashes = "#" x 101;

   $className = lcfirst("${classObj}Name");
   $classId   = lcfirst("${classObj}Id");

   $classCnt++;

   #
   # Generate Attributes
   #
   print "   Generating $classObj Attributes\n";
   @attribFile  = ();
   @Attrs = ();
   @Vars  = ();
   (@attribFile) = `cat Attribs/attribs.$classObj`;
   chop(@attribFile);

   push(@Attrs, "         $classObj Class Attributes:\n");

   foreach $Line (@attribFile){
      ($key, $val) = split(/,\s+/, $Line);

      push(@Meths, sprintf "             %-20s\n", $key);

      $Line =~ s/^/      "/;
      $Line =~ s/,/": /;
      $Line =~ s/$/,/;

      # print "   >>> $Line\n";

      push(@Vars,  "$Line\n");
   }

   #
   # Generate Methods
   #
   print "   Generating $classObj Methods\n";
   @methFile  = ();
   @Meths = ();
   (@methFile) = `cat Methods/methods.$classObj`;
   chop(@methFile);

   $syncFile = "Protos/$classObj.syncWithController";

   #
   # Handle the syncWithController method first
   #
   if(-e $syncFile){
      print "      Using Prototype Protos/$classObj.syncWithController\n";

      (@Sync) = `cat Protos/$classObj.syncWithController`;

      foreach $syncLine (@Sync){
         push(@Meths, $syncLine);
      }

      push(@Meths, "\n");
      push(@Meths, "   $Hashes\n\n");

      $protoCnt++;
   }

   foreach $Line (@methFile){
      #
      # Creates the Method
      #    If a Prototype exists for this Method use it
      #    Else generate a default "ToDo" method
      #
      # Note: The indentation of the Protos files is critical. Currently, the Protos
      #       all have the proper (3 space) leading indentation because they are
      #       subordinate to the zero indent of the baseClass file.
      #
      #       Ideally, this generator should not care about what's in the file, but
      #       should generate the proper indent
      #
      $Line =~ s/^\s+//;
      $Line =~ s/\s+$//;

      $Proto = "Protos/$Line";

      @protoFile = ();
      if(-e $Proto){
         print "      Using Prototype $Proto\n";
	 (@protoFile) = `cat $Proto`;

	 foreach $protoLine (@protoFile){
	    push(@Meths, $protoLine);
	 }

	 push(@Meths, "\n");
	 push(@Meths, "   $Hashes\n\n");
	 
	 $protoCnt++;
      }
      else{
	 #
	 # Generate a Default ToDo Method
	 #
         print "      ToDo $Proto\n";

	 ($class, $func) = split(/\./, $Line);

	 push(@Meths, sprintf "   def %s_%s(self):\n", $class, $func);
	 push(@Meths, sprintf "      \"\"\"\n");
	 push(@Meths, sprintf "         ToDo: Zapi Call to $Line\n"); 	
	 push(@Meths, sprintf "      \"\"\"\n"); 				
	 push(@Meths, sprintf "\n"); 					
	 push(@Meths, sprintf "      info = None\n\n"); 			
	 push(@Meths, sprintf "      cmd = \{\n"); 			
	 push(@Meths, sprintf "         \"cmd\":\"\$%s_%s\",\n", $class, $func);
	 push(@Meths, sprintf "         \"args\":self._cfg\n");		
	 push(@Meths, sprintf "      \}\n\n"); 				
	 push(@Meths, sprintf "      info = self.makeZapyRequest(json.dumps(cmd))\n\n");
	 push(@Meths, sprintf "      return info\n\n");			
	 push(@Meths, sprintf "   $Hashes\n\n");				
	 
	 $todosCnt++;
      }

      $methsCnt++;
   }

   #
   # Generate the Class
   #
   print "   Generating $classObj Class\n";
   @classFile = ();
   (@classFile) = `cat baseTemplate.py`;

   open($Fot, ">$classObj.py");
      foreach $Line (@classFile){
	 if ($Line =~ /---CLASS---/){
	    $Line =~ s/---CLASS---/$classObj/;
	    print $Fot $Line;
	    next;
	 }

	 if ($Line =~ /---VARS---/){
	    foreach $Var (@Vars){
	       print $Fot $Var;
	    }
	    next;
	 }

	 if ($Line =~ /---CLASSNAME---/){
	    $Line =~ s/---CLASSNAME---/$className/;
	 }

	 if ($Line =~ /---CLASSID---/){
	    $Line =~ s/---CLASSID---/$classId/;
	 }

	 if ($Line =~ /---ATTRIB---/){
	    foreach $Attr (@Attrs){
	       print $Fot $Attr;
	    }
	    next;
	 }

	 if($Line =~ /---METHODS---/){
	    foreach $Meth (@Meths){
	       print $Fot $Meth;
	    }
	    next;
	 }

	 print $Fot $Line;
      }
   close($Fot);

   print "$classObj Class Generation Complete\n\n";
}

print "Generator Statistics\n";
printf("   Total Classes = %5d\n", $classCnt);
printf("   Total Methods = %5d\n", $methsCnt);
printf("   Protos Used   = %5d\n", $protoCnt);
printf("   ToDos Created = %5d\n", $todosCnt);
printf("   Completion    = %5.2f%\n\n", $protoCnt / $methsCnt);


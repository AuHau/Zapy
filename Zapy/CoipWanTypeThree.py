"""
   Zapy CoipWanTypeThree Class Definition

   ******
      Note: This file is autogenerated by genClasses. Do not make changes here as they will be overwritten.

      Generated on 17-Sep-2018 20:09:00
   ******

   Copyright (C) 2012-2018 Zentera Systems, Inc. - All Rights Reserved

   This demonstration software is provided by the copyright holders and contributors "as is" and 
   any express or implied warranties, including, but not limited to, the implied warranties of 
   merchantability and fitness for a particular purpose are disclaimed. In no event shall the 
   copyright holder or contributors be liable for any direct, indirect, incidental, special, 
   exemplary, or consequential damages (Including, but not limited to, procurement of substitute 
   goods or services; Loss of use, data, or profits; or business interruption) however caused and 
   on any theory of liability, whether in contract, strict liability, or tort (including negligence 
   or otherwise) arising in any way out of the use of this software, even if advised of the 
   possibility of such damage.

   This software is for demonstration purposes only and is not supported by Zentera Systems, Inc.

"""

import json
from zapyClass import zapyClass
import keyChain
import time
import sys

class CoipWanTypeThree(zapyClass):

   #
   # Class Data and Defaults
   #
   _cfg = {
      "appProfileId": 	None,
      "coipWanId": 	None,
      "coipWanName": 	None,
      "coipWanType": 	'typeThree',
      "components": 	None,
      "direction": 	None,
      "znsClusterId": 	None,
   }

   keyStore = []

   _Debug = True

   #
   # Used to Retrieve the Attribute Name and Id for a Derived Class
   #

   _className = "coipWanTypeThreeName"
   _classId   = "coipWanTypeThreeId"

   def __init__(self, keyStore, *args):
      """
	 Class Initialization
	    keyStore: A passed keyChain Object
	    args[0]:  The Path to the Configration File to be Loaded

         CoipWanTypeThree Class Attributes:

	 Class Configuration Attributes
	    cfgFileName		: File Name of the Loaded Configuration
      """

      #
      # Load the API Keys
      #
      self.keyStore = keyStore
      
      #
      # Load a Config File if Passed
      #
      if args[0] is None:
         pass
      else:
	 # print "   Loading Configuration File:", args[0]
         self.loadCfg(args[0])

      # for key, value in kwargs.items():
	 # print("The value of {} is {}".format(key, value))

	 # self._cfg[key] = value

   def getName(self):
      return self._className

   def getId(self):
      return self._classId

   ####################################################################################################
   #
   # Class Member Functions
   #
   ####################################################################################################

   def syncWithController(self, ap, cp1, cp2):
      """
         If the CoipWanTypeThree described by the config file exists, synchronize the data structure to the controller
	 If it doesn't exist, create it.

	 ToDo: Should Handle multiple ranges for From / To components - More testing needed!

	 Update: 28-Jul-18: This object didn't carry the information for fromEdgeGatewat and toEdgeGateway and thus
	 relied on that information being passed in attached to the Components (alias EndServer) that carried it in
	 previous versions of this library.

	 This update is a prototype of correcting that.

	 The update changes the reference of the from/to EGs' EndServer in favor of being carried by the self of a
	 CoipWanTypeThree object.

	 However, that means I need to teach the CoipWan syncWithController functions of the CoipWan family to configure
	 itself (i.e. use self._cfg['coipWanType'] references). I keep thinking that a 'from' or 'to' Component should really
	 be it's own Zapy object. They are nested and complex. Might be better to make a smarter object out of them.
      """
      
      self._cfg['appProfileId'] = ap.get('appProfileId')

      #
      # Check to see if this CoipWan already exists
      #
      cwExists = False

      info = ap.AppProfile_listCoipWans()

      if len(info['data']) > 0:
         for i in range(0, len(info['data'])):
	    # print ">>>", info['data'][i]['coipWanName'], "<->", self._cfg['coipWanName']
	    if info['data'][i]['coipWanName'] == self._cfg['coipWanName']:
	       #
	       # CoipWan Exists
	       #
	       # print "   INFO: Found and Existing CoIP Wan>", self._cfg['coipWanName']

	       for key, val in info['data'][i].items():
		  # print ">>>", key, "==", val
		  self._cfg[key] = val
	       
	       cwExists = True
	       break

      if not cwExists:
         # print "Adding a New '{}' CoipWan to {}".format(self._cfg['coipWanType'], ap.get('appProfileName'))

	 #
	 # Update the endServerIds
	 #
	 self._cfg['components']['fromEdgeGateway']['endServerId'] = cp1.get('endServerId')
	 self._cfg['components']['toEdgeGateway']['endServerId']   = cp2.get('endServerId')
	 
	 # print ">>> Cp1", cmps['fromEdgeGateway']['endServerId']
	 # print ">>> Cp2", cmps['toEdgeGateway']['endServerId']

	 #
	 # Make it so
	 #
	 cmd = {
	    'cmd':'$AppProfile.addCoipWanTypeThree',
	    'args':{
	       'appProfileId': self._cfg['appProfileId'],
	       'coipWanName': self._cfg['coipWanName'],
	       'direction': self._cfg['direction'],
	       'fromEdgeGateway': self._cfg['components']['fromEdgeGateway'],
	       'toEdgeGateway': self._cfg['components']['toEdgeGateway']
	    }
	 }

	 info = self.makeZapyRequest(json.dumps(cmd))

	 # print info

	 if info['status'] == 'Ok':
	    self._cfg['coipWanId'] = info['data']['coipWanId']
	 else:
	    print "ERROR: Status Not Ok"
	    print "   ", info

	 return info

      return cwExists

   #####################################################################################################

   def CoipWan_delete(self, *args):
      """
         Zapi Call to CoipWan.delete

	 If no arguments are passed, delete this CoipWan
	 If arguments are passed, assume args[0] == App Profile Id, args[1] == Coip Wan Id
      """

      info = None

      if args is not None:
	 cmd = {
	    "cmd":"$CoipWan.delete",
	    "args": { "coipWanId": args[0] }
	 }

      else:
	 if self._cfg['coipWanId'] != None:
	    cmd = {
	       "cmd":"$CoipWan.delete",
	       "args": { "coipWanId": self._cfg['coipWanId'] }
	    }

      info = self.makeZapyRequest(json.dumps(cmd))

      return info

   #####################################################################################################


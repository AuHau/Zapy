   def syncWithController(self, ap, cp1, cp2):
      """
         If the CoipWanTypeThree described by the config file exists, synchronize the data structure to the controller
	 If it doesn't exist, create it.

	 ToDo: Should Handle multiple ranges for From / To components - More testing needed!

	 Update: 28-Jul-18: This object didn't carry the information for fromEdgeGatewat and toEdgeGateway and thus
	 relied on that information being passed in attached to the Components (alias EndServer) that carried it in
	 previous versions of this library.

	 This update is a prototype of correcting that.

	 The update changes the reference of the from/to EGs' EndServer in favor of being carried by the self of a
	 CoipWanTypeThree object.

	 However, that means I need to teach the CoipWan syncWithController functions of the CoipWan family to configure
	 itself (i.e. use self._cfg['coipWanType'] references). I keep thinking that a 'from' or 'to' Component should really
	 be it's own Zapy object. They are nested and complex. Might be better to make a smarter object out of them.
      """
      
      self._cfg['appProfileId'] = ap.get('appProfileId')

      #
      # Check to see if this CoipWan already exists
      #
      cwExists = False

      info = ap.AppProfile_listCoipWans()

      if len(info['data']) > 0:
         for i in range(0, len(info['data'])):
	    # print ">>>", info['data'][i]['coipWanName'], "<->", self._cfg['coipWanName']
	    if info['data'][i]['coipWanName'] == self._cfg['coipWanName']:
	       #
	       # CoipWan Exists
	       #
	       print "   INFO: Found and Existing CoIP Wan>", self._cfg['coipWanName']

	       for key, val in info['data'][i].items():
		  # print ">>>", key, "==", val
		  self._cfg[key] = val
	       
	       cwExists = True
	       break

      if not cwExists:
         # print "Adding a New '{}' CoipWan to {}".format(self._cfg['coipWanType'], ap.get('appProfileName'))

	 #
	 # Update the endServerIds
	 #
	 self._cfg['components']['fromEdgeGateway']['endServerId'] = cp1.get('endServerId')
	 self._cfg['components']['toEdgeGateway']['endServerId']   = cp2.get('endServerId')
	 
	 # print ">>> Cp1", cmps['fromEdgeGateway']['endServerId']
	 # print ">>> Cp2", cmps['toEdgeGateway']['endServerId']

	 #
	 # Make it so
	 #
	 cmd = {
	    'cmd':'$AppProfile.addCoipWanTypeThree',
	    'args':{
	       'appProfileId': self._cfg['appProfileId'],
	       'coipWanName': self._cfg['coipWanName'],
	       'direction': self._cfg['direction'],
	       'fromEdgeGateway': self._cfg['components']['fromEdgeGateway'],
	       'toEdgeGateway': self._cfg['components']['toEdgeGateway']
	    }
	 }

	 info = self.makeZapyRequest(json.dumps(cmd))

	 # print info

	 if info['status'] == 'Ok':
	    self._cfg['coipWanId'] = info['data']['coipWanId']

	 return info

      return cwExists

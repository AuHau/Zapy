   def EndServer_register(self, targetPool):
      """
         Zapi Call to EndServer.register

	 This function behaves both like a normal method but also like syncWithController.

	 That is, it registers an EndServer but also fills itself with the returned data from that operation.
      """
      #
      # Determine if this EndServer is Already Registered
      #

      # targetPool.inspect()

      esRegistered = False

      if 'cloudServerPool' in targetPool.getName():
         #
	 # Look for this EndServer in the Target Cloud Server Pool
	 #
	 # print ">>> Looking in CloudServerPool", targetPool._cfg['poolTag'], "for", self._cfg['hostname']
	 esRegistered = targetPool.CloudServerPool_isEndServerRegistered(self)
      else:
         #
	 # Look for this EndServer in the Target Fabric Server Pool
	 #
	 # print ">>> Looking in FabricServerPool", targetPool._cfg['poolTag'], "for", self._cfg['hostname']
	 esRegistered = targetPool.FabricServerPool_isEndServerRegistered(self)

      if esRegistered is not None:
         print '   EndServer is Already Registered'

	 if 'endServerId' in self._cfg:
	    self._cfg['endServerId'] = esRegistered
         
	 #
	 # Update 28-Jul-18: An EndServer shouldn't know about a Type 3 CoiPWan
	 #
	 # If we move the WAN configuration to the EG, then this code isn't needed...
	 #
	 if 'toEdgeGateway' in self._cfg:
	    self._cfg['toEdgeGateway']['endServerId'] = esRegistered
	 
	 if 'fromEdgeGateway' in self._cfg:
	    self._cfg['fromEdgeGateway']['endServerId'] = esRegistered
	 
	 #
	 # Update 28-Jul-18: End of non-needed code
	 #
	 
	 details = self.EndServer_getDetails()

	 # print ">>>"
	 # print details['data']
	 # print "<<<"

	 for key in details['data']:
	    # print '   {:<25} = {:<25}'.format(key, details['data'][key])
	    self._cfg[key] = details['data'][key]
      else:
	 #
	 # Make It So
	 #
         # print '   Registering EndServer', self._cfg['hostname'], 'in', self._cfg['poolTag']

	 cmd = {
	    "cmd":"$EndServer.register",
	    "args": {
	       "poolTag":       self._cfg['poolTag'],
	       "hostname":      self._cfg['hostname'],
	       "sshId":         self._cfg['sshId'],
	       "sshPassword":   self._cfg['sshPassword'],
	       "sshPort":       self._cfg['sshPort']
	    }
	 }
	 
	 # "sshPrivateKey": self._cfg['sshPrivateKey'],

	 info = self.makeZapyRequest(json.dumps(cmd))

	 # print info

	 if 'Ok' in info['status']:
	    jobId = info["data"]["jobId"]
	 else:
	    print "Error in Endserver_register: No jobId returned from API call"
	    return None

	 query = {
	    "cmd":"$EndServer.queryRegistrationStatus",
	    "args": {
	       "jobId": jobId
	    }
	 }

	 notRegistered = True

	 #
	 # This is a Problem - It blocks until done potentially jamming up the entire Developer's script
	 #
         print '   Registering a EndServer', self._cfg['hostname'], 'in', self._cfg['poolTag'],

	 while notRegistered:
	    #
	    # Don't Abuse the Internet - Check once per second for job completion
	    #
	    sys.stdout.write('.')
	    sys.stdout.flush()

	    time.sleep(2)

	    jobStatus = self.makeZapyRequest(json.dumps(query))
	    
	    # print "      ", jobStatus

	    if 'done' in jobStatus['data']['jobStatus']:
	       notRegistered = False

	       self._cfg['endServerId'] = jobStatus['data']['endServerId']

	       endServerDetails = self.EndServer_getDetails()

	       for key, val in endServerDetails['data'].items():
		  # print '   {:<25} = {:<25}'.format(key, val)
		  self._cfg[key] = val

	       print
	       print "      EndServerId == ", self._cfg['endServerId']

	       return jobStatus['data']['endServerId']
